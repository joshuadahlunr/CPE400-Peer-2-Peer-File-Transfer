#include "messages.hpp"
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <iostream>
#include <fstream>
#include <sstream>

#include <boost/serialization/vector.hpp>
#include <boost/serialization/base_object.hpp>
#include <boost/filesystem.hpp>
#include <boost/filesystem/path.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/date_time/posix_time/posix_time_io.hpp>
#include <boost/date_time/posix_time/conversion.hpp>
#include <boost/date_time/posix_time/time_serialize.hpp>
#include <filesystem>



int main (void)
{
	//create stringstream
	std::stringstream ss;

	
// #pragma region FileMessage Struct Test
// 	//initialize struct and get file and timestamp
// 	FileMessage myMessage;
// 	myMessage.targetFile = "mytest.txt";
// 	myMessage.timestamp = std::chrono::system_clock::now();


// 	//serialize and stream in
// 	boost::archive::text_oarchive ao{ ss };
// 	ao << myMessage;
// 	//deserialize and stream out
// 	boost::archive::text_iarchive ai(ss);
// 	FileMessage newMessage;
// 	ai >> newMessage;
// 	//print message on other end
// 	std::time_t ttp = to_time_t(newMessage.timestamp);
// 	std::cout << newMessage.targetFile << " @ time " << std::ctime(&ttp) << std::endl;

// 	//clear stream for next test
// 	ss.str(std::string());
// #pragma endregion



	
#pragma region Message Struct Test

	//Initialize struct and set flag and Uint_64
	Message testMessage;
	testMessage.type = Message::Type::payload;
	testMessage.originatorNode = zt::IpAddress::ipv4FromString("127.0.0.1");

	boost::archive::text_oarchive ao{ ss };
	ao << testMessage;

	boost::archive::text_iarchive ai{ ss };
	Message newTestMessage;
	ai >> newTestMessage;

	std::cout << "flag: " << (int) newTestMessage.type << " & source: " << newTestMessage.originatorNode << std::endl;

#pragma endregion
	

	
// #pragma region FileCreate struct test
// 	FileCreate myFile;
// 	myFile.targetFile = "mytest.txt";
// 	myFile.timestamp = std::chrono::system_clock::now();
// 	myFile.fCreate = "Create me";

// 	boost::archive::binary_oarchive ao{ ss };
// 	ao << myFile;

// 	FileCreate myNewFile;
// 	boost::archive::binary_iarchive ai{ ss };
// 	ai >> myNewFile;

// 	std::time_t ttp = to_time_t(myFile.timestamp);
// 	std::cout << myNewFile.targetFile << " " << std::ctime(&ttp) << " " << myNewFile.fCreate << std::endl;
// #pragma endregion
	

	
// #pragma region FileChange struct test
// 	FileChange myFile;
// 	myFile.targetFile = "mytest.txt";
// 	myFile.timestamp = std::chrono::system_clock::now();
// 	myFile.fChange = "Create me";

// 	boost::archive::binary_oarchive ao{ ss };
// 	ao << myFile;

// 	FileChange myNewFile;
// 	boost::archive::binary_iarchive ai{ ss };
// 	ai >> myNewFile;

// 	std::time_t ttp = to_time_t(myFile.timestamp);
// 	std::cout << myNewFile.targetFile << " " << std::ctime(&ttp) << " " << myNewFile.fChange << std::endl;
// #pragma endregion
	

	
// #pragma region Connect struct test
// 	Connect myConnection;
// 	uint64_t a = 123;
// 	uint64_t b = 456;
// 	uint64_t c = 789;

// 	myConnection.connectList.push_back(a);
// 	myConnection.connectList.push_back(b);
// 	myConnection.connectList.push_back(c);
// 	myConnection.type = Message::Type::connect;
// 	myConnection.originatorNode = 123456789;

// 	boost::archive::binary_oarchive ao{ ss };
// 	ao << myConnection;

// 	Connect myNewConnection;
// 	boost::archive::binary_iarchive ai{ ss };
// 	ai >> myNewConnection;

// 	int size = myNewConnection.connectList.size();
// 	for (int i = 0; i < size; i++)
// 	{
// 		std::cout << myNewConnection.connectList[i] << " ";
// 	}
// 	std::cout << (int)myNewConnection.type << " " << myNewConnection.originatorNode << std::endl;

// #pragma endregion
	

// #pragma region Disconnect struct test
// 	Disconnect myDisconnection;
// 	uint64_t a = 123;
// 	uint64_t b = 456;
// 	uint64_t c = 789;

// 	myDisconnection.disConList.push_back(a);
// 	myDisconnection.disConList.push_back(b);
// 	myDisconnection.disConList.push_back(c);
// 	myDisconnection.type = Message::Type::disconnect;
// 	myDisconnection.originatorNode = 123456789;

// 	boost::archive::binary_oarchive ao{ ss };
// 	ao << myDisconnection;

// 	Disconnect myNewDisconnection;
// 	boost::archive::binary_iarchive ai{ ss };
// 	ai >> myNewDisconnection;

// 	int size = myNewDisconnection.disConList.size();
// 	for (int i = 0; i < size; i++)
// 	{
// 		std::cout << myNewDisconnection.disConList[i] << " ";
// 	}
// 	std::cout << (int)myNewDisconnection.type << " " << myNewDisconnection.originatorNode << std::endl;

// #pragma endregion

	
	return 0;
}
